<!DOCTYPE html>
<html lang="en">

<head>
	<meta charset="UTF-8">
	<meta name="viewport" content="width=device-width, initial-scale=1.0">
	<title>Video Call App</title>
	<script src="https://cdn.tailwindcss.com"></script>
	<script src="http://localhost:3000/socket.io/socket.io.js" defer></script>
	<style>
		.chat-message {
			max-width: 75%;
		}

		.chat-message.self {
			background-color: #1e40af;
			color: white;
		}

		.chat-message.other {
			background-color: #374151;
			color: white;
		}

		/* Dynamic grid for video participants */
		#videoGrid {
			display: grid;
			grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
			gap: 1rem;
			max-height: calc(100vh - 200px);
			overflow-y: auto;
		}

		#publicChat,
		#privateChat {
			max-height: 600px;
			overflow-y: auto;
		}
	</style>
</head>

<body class="bg-gray-900 text-white min-h-screen flex flex-col">
	<!-- Header -->
	<header class="bg-gray-800 p-4 flex justify-between items-center">
		<h1 class="text-xl font-bold">Specto Meeting ID: <%= meetingId %>
		</h1>
		<div class="flex space-x-2">
			<button id="muteButton" class="bg-gray-600 px-3 py-2 rounded hover:bg-gray-700">Mute</button>
			<button id="videoButton" class="bg-gray-600 px-3 py-2 rounded hover:bg-gray-700">Video Off</button>
			<button id="shareScreen" class="bg-gray-600 px-3 py-2 rounded hover:bg-gray-700">Share Screen</button>
			<button id="reactions" class="bg-gray-600 px-3 py-2 rounded hover:bg-gray-700">Reactions</button>
			<button id="participantsList" class="bg-gray-600 px-3 py-2 rounded hover:bg-gray-700">Participants</button>
			<button id="endCall" class="bg-red-600 px-4 py-2 rounded hover:bg-red-700">Leave</button>
		</div>
	</header>

	<!-- Main Content -->
	<div class="flex-1 flex flex-row p-4 space-x-4">
		<!-- Video Section -->
		<div class="flex-1 bg-gray-800 rounded-lg p-4">
			<h2 class="text-lg font-semibold mb-2">Participants</h2>
			<div id="videoGrid" class="grid gap-4">
				<!-- Video streams will be added here dynamically -->
				<!-- Mock 30 participants for layout testing -->
				<div class="relative bg-black rounded-lg overflow-hidden">
					<video autoplay playsinline muted class="w-full h-48 object-cover"></video>
					<p class="absolute bottom-2 left-2 text-white">You</p>
				</div>
			</div>
		</div>

		<!-- Chat Section -->
		<div class="w-1/3 bg-gray-700 rounded-lg shadow-lg flex flex-col">
			<!-- Chat Tabs -->
			<div class="flex border-b border-gray-600">
				<button id="publicTab"
					class="flex-1 py-2 text-center bg-blue-700 text-white rounded-tl-lg hover:bg-blue-800">Public
					Chat</button>
				<button id="privateTab"
					class="flex-1 py-2 text-center bg-gray-600 text-white rounded-tr-lg hover:bg-gray-700">Private
					Chat</button>
			</div>

			<!-- Public Chat -->
			<div id="publicChat" class="flex-1 p-4 overflow-y-auto">
				<div id="publicMessages" class="space-y-2">
					<!-- Messages will be added here -->
				</div>
			</div>

			<!-- Private Chat -->
			<div id="privateChat" class="flex-1 p-4 overflow-y-auto hidden">
				<!-- User Selection -->
				<select id="privateUserSelect"
					class="w-full p-2 border rounded mb-4 bg-gray-800 text-white border-gray-600">
					<option value="">Select a user</option>
					<!-- Users will be added here dynamically -->
				</select>
				<div id="privateMessages" class="space-y-2">
					<!-- Private messages will be added here -->
				</div>
			</div>

			<!-- Chat Input -->
			<div class="p-4 border-t border-gray-600">
				<div class="flex space-x-2">
					<input id="chatInput" type="text"
						class="flex-1 p-2 border rounded focus:outline-none focus:ring-2 focus:ring-blue-500 bg-gray-800 text-white border-gray-600"
						placeholder="Type a message...">
					<button id="sendMessage"
						class="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700">Send</button>
				</div>
			</div>
		</div>
	</div>

	<script id="app-data" type="application/json">
		<%- JSON.stringify({
			user,
			meetingSession,
			meetingId
		}) %>
	</script>

	<script defer>

		const rawData = document.getElementById('app-data').textContent;
		const appData = JSON.parse(rawData);

		const { user, meetingSession, meetingId } = appData;

		console.log("the meeting in client is ", meetingId);

		// Current user (for demo purposes)
		const currentUser = user;

		window.addEventListener('DOMContentLoaded', () => {
			const socket = io('http://localhost:3000', {
				auth: {
					userId: user.id,
					meetingId: meetingId,
					meetingSessionId: meetingSession.id,
					fullname: user.fullname,
				}
			});

			// Add message to chat on user join
			socket.on('joinMessage', ({ message, recipient, sender, timestamp }) => {
				console.log('Message was sent to chat');
				addMessage(publicMessages, message, false, recipient, sender, timestamp);
			});

			// Add message to public chat on public message sent
			socket.on('publicMessage', ({ message, recipient, sender, timestamp }) => {
				const isSelf = sender.id === currentUser.id;
				addMessage(publicMessages, message, isSelf, recipient, sender, timestamp);
			});

			// Add message to private chat on private message sent
			socket.on('privateMessage', ({ message, recipient, sender, timestamp }) => {
				const isSelf = sender.id === currentUser.id;
				addMessage(privateMessages, message, isSelf, recipient, sender, timestamp);
			});

			// Notify server about user join
			socket.on('connect', () => {
				console.log('Connected to Socket.IO server with userId:', user.fullname);
				console.log('Current room is ', meetingId);
				// Join the room on connection
				setTimeout(() => {
					socket.emit('joinRoom');
				}, 500);
			});

			// Update video grid to add only those users' videos that are in the room
			socket.on('participantsUpdate', (participants) => {
				videoGrid.innerHTML = '';  // Clear the video grid
				privateUserSelect.innerHTML = '<option value="">Select a user</option>';

				participants.forEach(user => {
					if (user.id !== currentUser.id) {
						const option = document.createElement('option');
						option.value = JSON.stringify(user);
						console.log('Option value looks like this: ', option.value);
						option.textContent = user.fullname;
						privateUserSelect.appendChild(option);
					}

					console.log('Fetched user id is: ', user.id);
					console.log('Fetched user socket id is: ', user.socketId);


					// Add video elements
					const div = document.createElement('div');
					div.classList.add('relative', 'bg-black', 'rounded-lg', 'overflow-hidden');
					div.innerHTML = `
						<video autoplay playsinline muted class="w-full h-48 object-cover"></video>
						<p class="absolute bottom-2 left-2 text-white">${user.id === currentUser.id ? 'You' : user.fullname}</p>
					`;
					videoGrid.appendChild(div);
				});
			})

			// Send message
			sendMessage.addEventListener('click', () => {
				const message = chatInput.value.trim();
				if (!message) return;

				const timestamp = new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });

				if (!privateChat.classList.contains('hidden')) {
					const recipientValue = privateUserSelect.value;
					if (!recipientValue) {
						alert('Please select a user to send a private message.');
						return;
					}
					const recipient = JSON.parse(recipientValue);
					console.log('Parsed recipient looks like this: ', recipient);
					console.log('Socket id of parsed: ', recipient.socketId);

					console.log('Private message is about to be sent to ', recipient.fullname);
					// Emit sending private message to server
					socket.emit('sendPrivateMessage', {
						message,
						recipient,
						sender: currentUser,
						timestamp,
					});
				} else {
					// Emit sending public message to server
					socket.emit('sendPublicMessage', {
						message,
						recipient: null,
						sender: currentUser,
						timestamp,
					});
				}

				chatInput.value = '';
			});

		});

		// Add message to chat
		function addMessage(container, message, isSelf, recipient = null, sender, timestamp) {
			const div = document.createElement('div');
			div.classList.add('chat-message', 'p-2', 'rounded-lg', isSelf ? 'self' : 'other', isSelf ? 'ml-auto' : 'mr-auto');
			const senderText = isSelf ? 'You' : typeof sender !== 'string' ? sender.fullname : sender;
			div.innerHTML = `
					<div class="flex justify-between text-xs mb-1">
					<span>${senderText}${recipient.id !== currentUser.id ? ` to ${recipient.fullname}` : 'You'}</span>
					<span>${timestamp}</span>
					</div>
					<div>${message}</div>
				`;
			container.appendChild(div);
			container.scrollTop = container.scrollHeight;
		}

		const publicTab = document.getElementById('publicTab');
		const privateTab = document.getElementById('privateTab');
		const publicChat = document.getElementById('publicChat');
		const privateChat = document.getElementById('privateChat');
		const publicMessages = document.getElementById('publicMessages');
		const privateMessages = document.getElementById('privateMessages');
		const privateUserSelect = document.getElementById('privateUserSelect');
		const chatInput = document.getElementById('chatInput');
		const sendMessage = document.getElementById('sendMessage');
		const endCall = document.getElementById('endCall');
		const muteButton = document.getElementById('muteButton');
		const videoButton = document.getElementById('videoButton');
		const shareScreen = document.getElementById('shareScreen');
		const reactions = document.getElementById('reactions');
		const participantsList = document.getElementById('participantsList');
		const videoGrid = document.getElementById('videoGrid');

		// // Mock participants
		// const participants = Array.from({ length: 30 }, (_, i) => `User ${i + 1}`);


		// Tab switching
		publicTab.addEventListener('click', () => {
			publicTab.classList.add('bg-blue-700', 'text-white');
			publicTab.classList.remove('bg-gray-600');
			privateTab.classList.add('bg-gray-600');
			privateTab.classList.remove('bg-blue-700', 'text-white');
			publicChat.classList.remove('hidden');
			privateChat.classList.add('hidden');
		});

		privateTab.addEventListener('click', () => {
			privateTab.classList.add('bg-blue-700', 'text-white');
			privateTab.classList.remove('bg-gray-600');
			publicTab.classList.add('bg-gray-600');
			publicTab.classList.remove('bg-blue-700', 'text-white');
			privateChat.classList.remove('hidden');
			publicChat.classList.add('hidden');
		});

		// Button actions 
		let isMuted = false;
		muteButton.addEventListener('click', () => {
			isMuted = !isMuted;
			muteButton.textContent = isMuted ? 'Unmute' : 'Mute';
			// Add mute/unmute logic here
		});

		let isVideoOn = true;
		videoButton.addEventListener('click', () => {
			isVideoOn = !isVideoOn;
			videoButton.textContent = isVideoOn ? 'Video Off' : 'Video On';
			// Add video on/off logic here
		});

		shareScreen.addEventListener('click', () => {
			alert('Screen sharing started.');
			// Add screen sharing logic here
		});

		reactions.addEventListener('click', () => {
			alert('Reactions menu opened.');
			// Add reactions logic here
		});

		participantsList.addEventListener('click', () => {
			alert('Participants list opened.');
			// Add participants list logic here
		});

		endCall.addEventListener('click', () => {
			alert('Call ended.');
			// Add your end call logic here (e.g., stop WebRTC streams)
		});
	</script>
</body>

</html>